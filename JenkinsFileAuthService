// ==========================================
// PIPELINE GEN√âRICA PARA MICROSERVICIOS SPRING BOOT - VERSI√ìN CORREGIDA SIN VARIABLES DUPLICADAS
// ==========================================

pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    triggers {
        githubPush()
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 45, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '15'))
    }

    // üîß PAR√ÅMETROS CONFIGURABLES POR MICROSERVICIO
    parameters {
        string(
            name: 'SERVICE_NAME',
            defaultValue: '',
            description: 'Nombre del microservicio (ej: user-service, product-service). Si est√° vac√≠o, se detecta autom√°ticamente.'
        )
        string(
            name: 'JAR_NAME',
            defaultValue: '',
            description: 'Nombre del archivo JAR (ej: userService-0.0.1-SNAPSHOT.jar). Si est√° vac√≠o, se detecta autom√°ticamente.'
        )
        string(
            name: 'SERVICE_PATH',
            defaultValue: '',
            description: 'Ruta personalizada en el servidor. Si est√° vac√≠o, usa /home/ubuntu/[SERVICE_NAME]'
        )
        choice(
            name: 'JAVA_VERSION',
            choices: ['21', '17', '11'],
            description: 'Versi√≥n de Java a usar'
        )
        booleanParam(
            name: 'FORCE_DEPLOY',
            defaultValue: false,
            description: 'Forzar deploy incluso en ramas de feature'
        )
    }

    environment {
        // ‚úÖ INICIALIZACI√ìN SEGURA DE VARIABLES
        BRANCH_NAME = "${env.GIT_BRANCH?.replaceAll('origin/', '') ?: env.BRANCH_NAME ?: 'dev'}"
        ENV = "${env.BRANCH_NAME == 'main' ? 'prod' : env.BRANCH_NAME ?: 'dev'}"

        // Configuraci√≥n de servidores EC2
        EC2_USER = 'ubuntu'
        EC2_IP_DEV = '23.22.115.242'
        EC2_IP_QA = '3.220.122.151'
        EC2_IP_PROD = '34.224.192.38'

        // Credenciales y herramientas
        SSH_KEY = credentials('ssh-key-ec2')
        JDK_DIR = "${WORKSPACE}/jdk${params.JAVA_VERSION ?: '21'}"
        JAVA_HOME = "${WORKSPACE}/jdk${params.JAVA_VERSION ?: '21'}"
        PATH = "${WORKSPACE}/jdk${params.JAVA_VERSION ?: '21'}/bin:${PATH}"

        // ‚úÖ INICIALIZACI√ìN SEGURA DE VARIABLES CALCULADAS
        CALCULATED_SERVICE_NAME = "default-service"
        CALCULATED_JAR_NAME = "default-service-0.0.1-SNAPSHOT.jar"
        CALCULATED_SERVICE_PATH = "/home/ubuntu/default-service"
        DEPLOY_STRATEGY = "compile-only"
        TARGET_ENV = "none"
    }

    stages {
        stage('üîç Auto-Detection & Setup') {
            steps {
                script {
                    echo "üîç [SETUP] Iniciando detecci√≥n autom√°tica..."

                    // ‚úÖ VALIDACI√ìN INICIAL ROBUSTA - SIN DECLARACIONES DUPLICADAS
                    try {
                        // 1. Detectar nombre del servicio
                        if (params.SERVICE_NAME && params.SERVICE_NAME.trim()) {
                            env.CALCULATED_SERVICE_NAME = params.SERVICE_NAME.trim()
                            echo "‚úÖ [SETUP] Nombre del servicio (par√°metro): ${env.CALCULATED_SERVICE_NAME}"
                        } else {
                            echo "üîç [SETUP] Detectando servicio desde pom.xml..."

                            // ‚úÖ DETECCI√ìN CON M√öLTIPLES FALLBACKS
                            try {
                                def detectedService = sh(
                                    script: '''
                                        set -e
                                        # Verificar que pom.xml existe
                                        if [ ! -f "pom.xml" ]; then
                                            echo "microservice-app"
                                            exit 0
                                        fi

                                        # Intentar detectar artifactId (excluyendo parent)
                                        ARTIFACT_ID=$(grep -oP '<artifactId>\\K[^<]+' pom.xml 2>/dev/null | grep -v 'spring-boot-starter-parent' | head -1 || echo "")

                                        if [ -n "$ARTIFACT_ID" ] && [ "$ARTIFACT_ID" != "" ]; then
                                            echo "$ARTIFACT_ID"
                                        else
                                            # Fallback: detectar desde <name>
                                            NAME=$(grep -oP '<name>\\K[^<]+' pom.xml 2>/dev/null | head -1 || echo "")
                                            if [ -n "$NAME" ] && [ "$NAME" != "" ]; then
                                                echo "$NAME"
                                            else
                                                # Fallback final: detectar desde clase principal
                                                APP_CLASS=$(find src/main/java -name '*Application.java' 2>/dev/null | head -1 | xargs basename -s .java 2>/dev/null || echo "")
                                                if [ -n "$APP_CLASS" ] && [ "$APP_CLASS" != "" ]; then
                                                    echo "$APP_CLASS" | sed 's/Application$//' | tr '[:upper:]' '[:lower:]'
                                                else
                                                    echo "microservice-app"
                                                fi
                                            fi
                                        fi
                                    ''',
                                    returnStdout: true
                                ).trim()

                                if (detectedService && detectedService != "") {
                                    env.CALCULATED_SERVICE_NAME = detectedService
                                    echo "‚úÖ [SETUP] Servicio detectado: ${env.CALCULATED_SERVICE_NAME}"
                                } else {
                                    env.CALCULATED_SERVICE_NAME = "microservice-app"
                                    echo "‚ö†Ô∏è [SETUP] Detecci√≥n fall√≥, usando nombre por defecto: ${env.CALCULATED_SERVICE_NAME}"
                                }

                            } catch (Exception e) {
                                echo "‚ö†Ô∏è [SETUP] Error en detecci√≥n autom√°tica: ${e.message}"
                                env.CALCULATED_SERVICE_NAME = "microservice-app"
                                echo "‚ö†Ô∏è [SETUP] Usando nombre por defecto: ${env.CALCULATED_SERVICE_NAME}"
                            }
                        }

                        // ‚úÖ LIMPIAR Y VALIDAR NOMBRE DEL SERVICIO
                        if (env.CALCULATED_SERVICE_NAME && env.CALCULATED_SERVICE_NAME != "") {
                            env.CALCULATED_SERVICE_NAME = env.CALCULATED_SERVICE_NAME.replaceAll('[^a-zA-Z0-9-_]', '-').toLowerCase()
                            if (env.CALCULATED_SERVICE_NAME.length() > 50) {
                                env.CALCULATED_SERVICE_NAME = env.CALCULATED_SERVICE_NAME.substring(0, 50)
                            }
                            if (env.CALCULATED_SERVICE_NAME.startsWith("-")) {
                                env.CALCULATED_SERVICE_NAME = env.CALCULATED_SERVICE_NAME.substring(1)
                            }
                            if (env.CALCULATED_SERVICE_NAME.endsWith("-")) {
                                env.CALCULATED_SERVICE_NAME = env.CALCULATED_SERVICE_NAME.substring(0, env.CALCULATED_SERVICE_NAME.length() - 1)
                            }
                            if (env.CALCULATED_SERVICE_NAME == "" || env.CALCULATED_SERVICE_NAME == "-") {
                                env.CALCULATED_SERVICE_NAME = "microservice-app"
                            }
                        } else {
                            env.CALCULATED_SERVICE_NAME = "microservice-app"
                        }

                        echo "‚úÖ [SETUP] Nombre final del servicio: ${env.CALCULATED_SERVICE_NAME}"

                        // 2. Calcular nombre del JAR
                        if (params.JAR_NAME && params.JAR_NAME.trim()) {
                            env.CALCULATED_JAR_NAME = params.JAR_NAME.trim()
                        } else {
                            env.CALCULATED_JAR_NAME = "${env.CALCULATED_SERVICE_NAME}-0.0.1-SNAPSHOT.jar"
                        }
                        echo "üì¶ [SETUP] JAR esperado: ${env.CALCULATED_JAR_NAME}"

                        // 3. Calcular ruta del servicio
                        if (params.SERVICE_PATH && params.SERVICE_PATH.trim()) {
                            env.CALCULATED_SERVICE_PATH = params.SERVICE_PATH.trim()
                        } else {
                            env.CALCULATED_SERVICE_PATH = "/home/ubuntu/${env.CALCULATED_SERVICE_NAME}"
                        }
                        echo "üìÅ [SETUP] Ruta del servicio: ${env.CALCULATED_SERVICE_PATH}"

                        // 4. Validaci√≥n de estructura
                        echo "üîç [SETUP] Validando estructura del proyecto..."
                        try {
                            def pomExists = sh(
                                script: "[ -f pom.xml ] && echo 'true' || echo 'false'",
                                returnStdout: true
                            ).trim()

                            def mainClassCount = sh(
                                script: "find src/main/java -name '*Application.java' 2>/dev/null | wc -l || echo '0'",
                                returnStdout: true
                            ).trim()

                            echo "‚úÖ [SETUP] pom.xml existe: ${pomExists}"
                            echo "‚úÖ [SETUP] Clases *Application.java encontradas: ${mainClassCount}"

                            if (pomExists == 'false') {
                                echo "‚ö†Ô∏è [SETUP] ADVERTENCIA: No se encontr√≥ pom.xml"
                            }
                            if (mainClassCount == '0') {
                                echo "‚ö†Ô∏è [SETUP] ADVERTENCIA: No se encontr√≥ clase principal *Application.java"
                            }

                        } catch (Exception e) {
                            echo "‚ö†Ô∏è [SETUP] Error validando estructura: ${e.message}"
                        }

                        // 5. Determinar estrategia de deploy
                        def currentBranch = env.BRANCH_NAME ?: 'dev'

                        if (params.FORCE_DEPLOY == true) {
                            echo "üöÄ [SETUP] ESTRATEGIA: Deploy forzado"
                            env.DEPLOY_STRATEGY = 'auto'
                            env.TARGET_ENV = currentBranch
                        } else if (currentBranch == 'dev') {
                            echo "üöÄ [SETUP] ESTRATEGIA: Deploy autom√°tico a DEV"
                            env.DEPLOY_STRATEGY = 'auto'
                            env.TARGET_ENV = 'dev'
                        } else if (currentBranch == 'qa') {
                            echo "üîÑ [SETUP] ESTRATEGIA: Deploy autom√°tico a QA"
                            env.DEPLOY_STRATEGY = 'auto'
                            env.TARGET_ENV = 'qa'
                        } else if (currentBranch == 'main') {
                            echo "‚ö†Ô∏è [SETUP] ESTRATEGIA: Aprobaci√≥n manual + Deploy a PROD"
                            env.DEPLOY_STRATEGY = 'manual-approval'
                            env.TARGET_ENV = 'prod'
                        } else {
                            echo "‚úèÔ∏è [SETUP] ESTRATEGIA: Solo compilaci√≥n"
                            env.DEPLOY_STRATEGY = 'compile-only'
                            env.TARGET_ENV = 'none'
                        }

                        echo """
üéØ [SETUP] CONFIGURACI√ìN FINAL:
   ‚Ä¢ Servicio: ${env.CALCULATED_SERVICE_NAME}
   ‚Ä¢ JAR: ${env.CALCULATED_JAR_NAME}
   ‚Ä¢ Ruta: ${env.CALCULATED_SERVICE_PATH}
   ‚Ä¢ Rama: ${currentBranch}
   ‚Ä¢ Entorno: ${env.TARGET_ENV}
   ‚Ä¢ Estrategia: ${env.DEPLOY_STRATEGY}
   ‚Ä¢ Java: ${params.JAVA_VERSION ?: '21'}
   ‚Ä¢ Tests: DESHABILITADOS (solo compilaci√≥n y deploy)
   ‚Ä¢ Puerto: Configurado en Config Server
"""

                    } catch (Exception e) {
                        echo "‚ùå [SETUP] Error cr√≠tico en configuraci√≥n: ${e.message}"
                        e.printStackTrace()

                        // ‚úÖ CONFIGURACI√ìN DE EMERGENCIA
                        env.CALCULATED_SERVICE_NAME = "emergency-service"
                        env.CALCULATED_JAR_NAME = "emergency-service-0.0.1-SNAPSHOT.jar"
                        env.CALCULATED_SERVICE_PATH = "/home/ubuntu/emergency-service"
                        env.DEPLOY_STRATEGY = "compile-only"
                        env.TARGET_ENV = "none"

                        echo "üÜò [SETUP] Usando configuraci√≥n de emergencia"
                        error("Error en configuraci√≥n inicial")
                    }
                }
            }
        }

        stage('üîß Setup JDK') {
            when {
                not { environment name: 'DEPLOY_STRATEGY', value: 'skip' }
            }
            steps {
                script {
                    def javaVersion = params.JAVA_VERSION ?: '21'
                    def downloadUrl = ""

                    switch(javaVersion) {
                        case '21':
                            downloadUrl = "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_linux_hotspot_21.0.2_13.tar.gz"
                            break
                        case '17':
                            downloadUrl = "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.9%2B9/OpenJDK17U-jdk_x64_linux_hotspot_17.0.9_9.tar.gz"
                            break
                        case '11':
                            downloadUrl = "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_linux_hotspot_11.0.21_9.tar.gz"
                            break
                        default:
                            downloadUrl = "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_linux_hotspot_21.0.2_13.tar.gz"
                    }

                    echo "üîß [${env.CALCULATED_SERVICE_NAME}] Configurando JDK ${javaVersion}..."
                    sh """
                        mkdir -p \${JDK_DIR}

                        if [ ! -f \${JDK_DIR}/bin/java ]; then
                            echo "üì• [${env.CALCULATED_SERVICE_NAME}] Descargando JDK ${javaVersion}..."
                            wget -q "${downloadUrl}" -O jdk.tar.gz
                            tar -xzf jdk.tar.gz -C \${JDK_DIR} --strip-components=1
                            rm jdk.tar.gz
                            echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] JDK ${javaVersion} instalado"
                        else
                            echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] JDK ${javaVersion} ya existe"
                        fi

                        echo "‚òï [${env.CALCULATED_SERVICE_NAME}] Java version:"
                        \${JDK_DIR}/bin/java -version
                    """
                }
            }
        }

        stage('üî® Build Application') {
            when {
                not { environment name: 'DEPLOY_STRATEGY', value: 'skip' }
            }
            steps {
                sh """
                    export JAVA_HOME=\${JDK_DIR}
                    export PATH=\${JAVA_HOME}/bin:\$PATH

                    echo "üî® [${env.CALCULATED_SERVICE_NAME}] Compilando aplicaci√≥n SIN TESTS..."

                    # Dar permisos de ejecuci√≥n a mvnw
                    chmod +x ./mvnw

                    # COMPILACI√ìN SIMPLE - NO TESTS, NO JACOCO, NO PROBLEMAS
                    echo "üîß [${env.CALCULATED_SERVICE_NAME}] Configuraci√≥n: Sin tests, sin JaCoCo, solo JAR"

                    # Flags para deshabilitar todo lo problem√°tico
                    MAVEN_FLAGS="-DskipTests -Dmaven.test.skip=true -Djacoco.skip=true -Dcheckstyle.skip=true -Dspotbugs.skip=true -Dflyway.skip=true -Dspring.profiles.active="

                    echo "üìù Compilando con flags: \$MAVEN_FLAGS"

                    if ./mvnw clean package \$MAVEN_FLAGS -q; then
                        echo "‚úÖ Compilaci√≥n exitosa sin tests"
                    else
                        echo "‚ö†Ô∏è Compilaci√≥n fall√≥, intentando con configuraci√≥n m√°s agresiva..."

                        # Fallback 1: Con configuraci√≥n offline
                        if ./mvnw clean package \$MAVEN_FLAGS -o -q; then
                            echo "‚úÖ Compilaci√≥n exitosa con configuraci√≥n offline"
                        else
                            echo "‚ö†Ô∏è Fallback offline fall√≥, intentando sin perfiles..."
                            # Fallback 2: Sin perfiles y sin config server
                            if ./mvnw clean package -DskipTests -Dmaven.test.skip=true -q; then
                                echo "‚úÖ Compilaci√≥n exitosa con configuraci√≥n m√≠nima"
                            else
                                echo "‚ùå Compilaci√≥n fall√≥. Mostrando errores:"
                                ./mvnw clean package -DskipTests 2>&1 | tail -20
                                exit 1
                            fi
                        fi
                    fi

                    # Buscar JAR compilado usando shell
                    echo "üîç Buscando JAR compilado..."
                    JAR_FILE=\$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)

                    if [ -n "\$JAR_FILE" ] && [ -s "\$JAR_FILE" ]; then
                        echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] JAR encontrado: \$JAR_FILE"
                        echo "üìä Tama√±o: \$(du -h "\$JAR_FILE" | cut -f1)"
                        ls -lh "\$JAR_FILE"

                        JAR_NAME=\$(basename "\$JAR_FILE")
                        echo "JAR_FOUND=\$JAR_NAME" > jar_info.txt
                        echo "‚úÖ JAR listo para deploy"
                    else
                        echo "‚ùå [${env.CALCULATED_SERVICE_NAME}] No se encontr√≥ JAR v√°lido"
                        echo "üîç Contenido de target/:"
                        ls -la target/ 2>/dev/null || echo "Directorio target no existe"
                        exit 1
                    fi
                """

                script {
                    // ‚úÖ Leer el JAR encontrado de forma ultra segura
                    try {
                        if (fileExists('jar_info.txt')) {
                            def jarInfo = readFile('jar_info.txt').trim()
                            if (jarInfo && jarInfo.contains('=')) {
                                def foundJarName = jarInfo.split('=')[1]
                                if (foundJarName && foundJarName != "") {
                                    env.CALCULATED_JAR_NAME = foundJarName
                                    echo "‚úÖ [SETUP] JAR final detectado: ${env.CALCULATED_JAR_NAME}"
                                } else {
                                    throw new Exception("JAR name est√° vac√≠o")
                                }
                            } else {
                                throw new Exception("Formato de jar_info.txt inv√°lido")
                            }
                        } else {
                            throw new Exception("jar_info.txt no existe")
                        }
                    } catch (Exception e) {
                        env.CALCULATED_JAR_NAME = "${env.CALCULATED_SERVICE_NAME}-0.0.1-SNAPSHOT.jar"
                        echo "‚ö†Ô∏è [SETUP] Error leyendo jar_info.txt (${e.message}), usando JAR por defecto: ${env.CALCULATED_JAR_NAME}"
                    }
                }
            }
        }

        stage('‚ö†Ô∏è Production Approval') {
            when {
                environment name: 'DEPLOY_STRATEGY', value: 'manual-approval'
            }
            steps {
                script {
                    def branchName = env.BRANCH_NAME ?: 'unknown'
                    def buildNumber = env.BUILD_NUMBER ?: 'N/A'
                    def javaVersion = params.JAVA_VERSION ?: '21'

                    echo """
üö® [${env.CALCULATED_SERVICE_NAME}] APROBACI√ìN REQUERIDA PARA PRODUCCI√ìN

üìã Informaci√≥n del Deploy:
   ‚Ä¢ Servicio: ${env.CALCULATED_SERVICE_NAME}
   ‚Ä¢ Entorno: PRODUCCI√ìN
   ‚Ä¢ Rama: ${branchName}
   ‚Ä¢ Build: ${buildNumber}
   ‚Ä¢ Java: ${javaVersion}
   ‚Ä¢ Compilaci√≥n: SIN TESTS (solo JAR)
   ‚Ä¢ Puerto: Definido en Config Server
"""

                    timeout(time: 15, unit: 'MINUTES') {
                        def approvalResponse = input(
                            message: "üö® ¬øAprobar deploy de ${env.CALCULATED_SERVICE_NAME} a PRODUCCI√ìN?",
                            ok: '‚úÖ Aprobar Deploy',
                            parameters: [
                                choice(
                                    name: 'ACTION',
                                    choices: ['Aprobar', 'Rechazar'],
                                    description: 'Selecciona la acci√≥n'
                                ),
                                text(
                                    name: 'COMMENTS',
                                    defaultValue: '',
                                    description: 'Comentarios adicionales (opcional)'
                                )
                            ]
                        )

                        if (approvalResponse != 'Aprobar') {
                            error("‚ùå [${env.CALCULATED_SERVICE_NAME}] Deploy a producci√≥n rechazado")
                        }

                        echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] Deploy a producci√≥n APROBADO"
                        if (params.COMMENTS?.trim()) {
                            echo "üí¨ Comentarios: ${params.COMMENTS}"
                        }
                    }
                }
            }
        }

        stage('üöÄ Deploy Microservice') {
            when {
                anyOf {
                    environment name: 'DEPLOY_STRATEGY', value: 'auto'
                    environment name: 'DEPLOY_STRATEGY', value: 'manual-approval'
                }
            }
            steps {
                script {
                    def EC2_IP = ''
                    def cleanServiceName = env.CALCULATED_SERVICE_NAME.replaceAll('[^a-zA-Z0-9-_]', '-')
                    def targetEnv = env.TARGET_ENV ?: 'dev'
                    def envProfile = env.ENV ?: 'dev'

                    // Determinar IP seg√∫n entorno
                    if (targetEnv == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (targetEnv == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo "üöÄ [${env.CALCULATED_SERVICE_NAME}] Desplegando en ${targetEnv.toUpperCase()} (${EC2_IP})"

                    // 1. Preparar servidor
                    sh """
                    echo "üîß [${env.CALCULATED_SERVICE_NAME}] Preparando servidor..."
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${EC2_USER}@${EC2_IP} '
                        # Crear directorios
                        sudo mkdir -p ${env.CALCULATED_SERVICE_PATH}
                        sudo chown -R ubuntu:ubuntu ${env.CALCULATED_SERVICE_PATH}

                        # Instalar dependencias b√°sicas
                        which curl > /dev/null || sudo apt-get update -qq && sudo apt-get install -y curl
                        which netstat > /dev/null || sudo apt-get install -y net-tools

                        # Instalar Java si no existe
                        if ! which java > /dev/null; then
                            echo "‚òï [${env.CALCULATED_SERVICE_NAME}] Instalando Java ${params.JAVA_VERSION ?: '21'}..."
                            sudo apt-get update -qq && sudo apt-get install -y openjdk-${params.JAVA_VERSION ?: '21'}-jre-headless
                        fi

                        echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] Servidor preparado"
                    '
                    """

                    // 2. Detener servicio existente
                    sh """
                    echo "üõë [${env.CALCULATED_SERVICE_NAME}] Deteniendo servicio existente..."
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        if sudo systemctl is-active --quiet ${cleanServiceName}.service 2>/dev/null; then
                            echo "üõë Deteniendo servicio ${cleanServiceName}..."
                            sudo systemctl stop ${cleanServiceName}.service
                            sleep 5
                        else
                            echo "‚ÑπÔ∏è Servicio ${cleanServiceName} no est√° corriendo"
                        fi
                    ' || echo "‚ö†Ô∏è [${env.CALCULATED_SERVICE_NAME}] No hay servicio previo"
                    """

                    // 3. Copiar JAR
                    sh """
                    echo "üì¶ [${env.CALCULATED_SERVICE_NAME}] Copiando JAR..."

                    # Buscar el JAR compilado din√°micamente
                    JAR_FILE=\$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)

                    if [ -n "\$JAR_FILE" ]; then
                        echo "üì¶ Copiando JAR: \$JAR_FILE"
                        scp -i \$SSH_KEY -o StrictHostKeyChecking=no "\$JAR_FILE" ${EC2_USER}@${EC2_IP}:${env.CALCULATED_SERVICE_PATH}/app.jar
                        echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] JAR copiado como app.jar"
                    else
                        echo "‚ùå No se encontr√≥ JAR para copiar"
                        exit 1
                    fi
                    """

                    // 4. Crear servicio systemd
                    def systemdService = """[Unit]
Description=Spring Boot Microservice - ${env.CALCULATED_SERVICE_NAME}
After=network.target
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=ubuntu
Group=ubuntu
WorkingDirectory=${env.CALCULATED_SERVICE_PATH}
ExecStart=/usr/bin/java -jar ${env.CALCULATED_SERVICE_PATH}/app.jar \\
    --spring.profiles.active=${envProfile} \\
    --logging.level.root=INFO \\
    --logging.file.name=${env.CALCULATED_SERVICE_PATH}/${cleanServiceName}.log

# Configuraci√≥n de reinicio
Restart=on-failure
RestartSec=10
SuccessExitStatus=143

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=${cleanServiceName}

# Seguridad
NoNewPrivileges=true
PrivateTmp=true

# Variables de entorno
Environment=JAVA_HOME=/usr/lib/jvm/java-${params.JAVA_VERSION ?: '21'}-openjdk-amd64
Environment=SPRING_PROFILES_ACTIVE=${envProfile}

[Install]
WantedBy=multi-user.target"""

                    // 5. Configurar e iniciar servicio
                    sh """
                    echo "‚öôÔ∏è [${env.CALCULATED_SERVICE_NAME}] Configurando servicio systemd..."

                    # Crear archivo de servicio
                    echo '${systemdService}' | ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'sudo tee /etc/systemd/system/${cleanServiceName}.service > /dev/null'

                    # Configurar e iniciar servicio
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        # Recargar systemd
                        sudo systemctl daemon-reload

                        # Habilitar auto-inicio
                        sudo systemctl enable ${cleanServiceName}.service

                        # Iniciar servicio
                        sudo systemctl start ${cleanServiceName}.service

                        # Verificar inicio
                        sleep 10
                        if sudo systemctl is-active --quiet ${cleanServiceName}.service; then
                            echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] Servicio iniciado correctamente"
                            sudo systemctl status ${cleanServiceName}.service --no-pager -l
                        else
                            echo "‚ùå [${env.CALCULATED_SERVICE_NAME}] Error al iniciar servicio"
                            sudo systemctl status ${cleanServiceName}.service --no-pager -l
                            sudo journalctl -u ${cleanServiceName}.service --since \"5 minutes ago\" --no-pager
                            exit 1
                        fi
                    '
                    """

                    echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] Deploy completado en ${targetEnv.toUpperCase()}!"
                }
            }
        }

        stage('üîç Health Check & Verification') {
            when {
                anyOf {
                    environment name: 'DEPLOY_STRATEGY', value: 'auto'
                    environment name: 'DEPLOY_STRATEGY', value: 'manual-approval'
                }
            }
            steps {
                script {
                    def EC2_IP = ''
                    def cleanServiceName = env.CALCULATED_SERVICE_NAME.replaceAll('[^a-zA-Z0-9-_]', '-')

                    if (env.TARGET_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.TARGET_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo "üîç [${env.CALCULATED_SERVICE_NAME}] Verificando deploy..."

                    // Esperar inicio completo
                    sh "sleep 30"

                    // Verificaciones completas
                    sh """
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        echo "üìä [${env.CALCULATED_SERVICE_NAME}] Estado del servicio:"
                        sudo systemctl status ${cleanServiceName}.service --no-pager

                        echo "üîå [${env.CALCULATED_SERVICE_NAME}] Detectando puerto del servicio..."
                        # Detectar el puerto que est√° usando el servicio
                        SERVICE_PORT=\$(sudo journalctl -u ${cleanServiceName}.service --since \"5 minutes ago\" --no-pager | grep -o "Tomcat started on port(s): [0-9]*" | grep -o "[0-9]*" | tail -1)

                        if [ -z "\$SERVICE_PORT" ]; then
                            # Fallback: buscar cualquier puerto que est√© escuchando el proceso Java
                            SERVICE_PID=\$(sudo systemctl show --property MainPID --value ${cleanServiceName}.service)
                            if [ "\$SERVICE_PID" != "0" ] && [ -n "\$SERVICE_PID" ]; then
                                SERVICE_PORT=\$(sudo netstat -tlnp 2>/dev/null | grep "\$SERVICE_PID/java" | awk "{print \$4}" | cut -d: -f2 | head -1)
                            fi
                        fi

                        if [ -n "\$SERVICE_PORT" ]; then
                            echo "‚úÖ Puerto detectado: \$SERVICE_PORT"

                            echo "üè• [${env.CALCULATED_SERVICE_NAME}] Verificando health endpoint..."
                            for i in {1..12}; do
                                if curl -f http://localhost:\$SERVICE_PORT/actuator/health 2>/dev/null; then
                                    echo "‚úÖ Health Check: PASSED"
                                    curl -s http://localhost:\$SERVICE_PORT/actuator/health | head -5
                                    break
                                fi
                                echo "‚è≥ Esperando health endpoint... (\$i/12)"
                                sleep 10
                            done
                        else
                            echo "‚ö†Ô∏è No se pudo detectar el puerto del servicio"
                            echo "üîç Puertos activos:"
                            sudo netstat -tuln | grep LISTEN
                        fi

                        echo "üìÑ [${env.CALCULATED_SERVICE_NAME}] √öltimos logs:"
                        sudo journalctl -u ${cleanServiceName}.service --since \"2 minutes ago\" --no-pager | tail -10

                        echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] Verificaci√≥n completada"
                    '
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                def deployStrategy = env.DEPLOY_STRATEGY ?: 'N/A'
                def branchName = env.BRANCH_NAME ?: 'unknown'
                def targetEnv = env.TARGET_ENV ?: 'unknown'

                if (deployStrategy && deployStrategy != 'compile-only') {
                    def EC2_IP = ''
                    def cleanServiceName = env.CALCULATED_SERVICE_NAME.replaceAll('[^a-zA-Z0-9-_]', '-')

                    if (targetEnv == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (targetEnv == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo """
üéâ [${env.CALCULATED_SERVICE_NAME}] ¬°DEPLOY EXITOSO EN ${targetEnv.toUpperCase()}!

üìã Informaci√≥n del servicio:
   ‚Ä¢ Nombre: ${env.CALCULATED_SERVICE_NAME}
   ‚Ä¢ Servidor: ${EC2_IP}
   ‚Ä¢ Systemd Service: ${cleanServiceName}.service
   ‚Ä¢ Java Version: ${params.JAVA_VERSION ?: '21'}
   ‚Ä¢ Compilaci√≥n: SIN TESTS (solo JAR optimizado)
   ‚Ä¢ Puerto: Configurado en Config Server

üåê Verificaci√≥n de salud:
   ‚Ä¢ El puerto se obtiene autom√°ticamente del Config Server
   ‚Ä¢ Health endpoint: http://${EC2_IP}:[PUERTO]/actuator/health
   ‚Ä¢ Info endpoint: http://${EC2_IP}:[PUERTO]/actuator/info

üõ†Ô∏è Comandos de gesti√≥n:
   ‚Ä¢ Estado: sudo systemctl status ${cleanServiceName}.service
   ‚Ä¢ Logs: sudo journalctl -u ${cleanServiceName}.service -f
   ‚Ä¢ Restart: sudo systemctl restart ${cleanServiceName}.service
   ‚Ä¢ Stop: sudo systemctl stop ${cleanServiceName}.service
   ‚Ä¢ Detectar puerto: sudo journalctl -u ${cleanServiceName}.service | grep "Tomcat started on port"

‚úÖ Auto-inicio habilitado
üöÄ Deploy optimizado sin tests - m√°xima velocidad
"""
                } else {
                    echo "‚úÖ [${env.CALCULATED_SERVICE_NAME}] Compilaci√≥n exitosa SIN TESTS - Rama: ${branchName}"
                }
            }
        }

        failure {
            script {
                def deployStrategy = env.DEPLOY_STRATEGY ?: 'N/A'
                def branchName = env.BRANCH_NAME ?: 'unknown'
                def buildNumber = env.BUILD_NUMBER ?: 'N/A'
                def cleanServiceName = env.CALCULATED_SERVICE_NAME.replaceAll('[^a-zA-Z0-9-_]', '-')

                echo """
‚ùå [${env.CALCULATED_SERVICE_NAME}] PIPELINE FALLIDO

üîç Informaci√≥n:
   ‚Ä¢ Servicio: ${env.CALCULATED_SERVICE_NAME}
   ‚Ä¢ Rama: ${branchName}
   ‚Ä¢ Estrategia: ${deployStrategy}
   ‚Ä¢ Build: ${buildNumber}

üõ†Ô∏è Debug: sudo journalctl -u ${cleanServiceName}.service
"""
            }
        }

        cleanup {
            sh '''
                rm -rf jdk*.tar.gz jdk.tar.gz jar_info.txt || true
                echo "‚úÖ Limpieza completada"
            '''
        }
    }
}